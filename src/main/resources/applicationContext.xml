<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
">

    <context:component-scan base-package="cn.liaozhonghao.www">
        <!--排除控制器注释-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--1.配置数据库相关参数-->
    <bean id="propertyConfigure"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!--2.数据源 druid-->
    <!--https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="10" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="-1" />

        <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
        <property name="defaultAutoCommit" value="true" />

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />

        <!-- 配置监控统计拦截的filters
        Druid的监控统计功能是通过filter-chain扩展实现，如果你要打开监控统计功能，配置StatFilter，具体看这里
        -->
        <property name="proxyFilters">
            <list>
                <ref bean="druid_stat_filter"/>
                <ref bean="druid_wall_filter"/>
                <ref bean="druid_log_filter"/>
            </list>
        </property>
    </bean>


    <bean class="com.alibaba.druid.filter.stat.StatFilter" id="druid_stat_filter">
        <!-- 慢sql规则，单位毫秒 -->
        <property name="slowSqlMillis" value="10000"/>
        <!-- 记录慢sql到日志 -->
        <property name="logSlowSql" value="true"/>
        <!-- 统计时合并相似sql -->
        <property name="mergeSql" value="true"/>
    </bean>

    <!-- sql防御 -->
    <bean class="com.alibaba.druid.wall.WallFilter" id="druid_wall_filter">
        <!-- 记录违反规则的sql到日志 -->
        <property name="logViolation" value="true"/>
    </bean>

    <bean class="com.alibaba.druid.filter.logging.Slf4jLogFilter" id="druid_log_filter">
        <!-- 记录真正执行的语句，即参数已注入的sql -->
        <property name="statementExecutableSqlLogEnable" value="true"/>
        <!-- 其它配置 -->
        <property name="statementCreateAfterLogEnabled" value="false"/>
        <property name="statementPrepareAfterLogEnabled" value="false"/>
        <property name="statementParameterSetLogEnabled" value="false"/>
        <property name="statementCloseAfterLogEnabled" value="false"/>
        <property name="resultSetCloseAfterLogEnabled" value="false"/>
    </bean>

    <!--3.配置SqlSession Factory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
    </bean>

    <!-- 扫描dao目录下所有以@MyBatisDao注解的接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.liaozhonghao.www.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 配置SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <!-- 通过构造函数注入 -->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!--配置_Druid和Spring关联监控配置-->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>cn.liaozhonghao.www.service.*</value>
                <value>cn.liaozhonghao.www.dao.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <!--声明式事务第一步，定义事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--使用注解实现声明式事务处理-->
    <tx:annotation-driven transaction-manager="transactionManager" />  <!--指定一个事务管理器-->


</beans>